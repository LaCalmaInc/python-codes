{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d9c1e561-08eb-43d6-ae4b-a4c488b6aa87",
   "metadata": {},
   "source": [
    "Considere:\n",
    "\n",
    "$$\n",
    "\\begin{align*}\n",
    "    \\begin{bmatrix}\n",
    "        1 & 2 & 3\\\\\n",
    "        3 & 2 & 1\\\\\n",
    "        1 & 1 & -1\n",
    "    \\end{bmatrix}\n",
    "    \\mathbf{x} &=\n",
    "    \\begin{bmatrix}\n",
    "        1\\\\\n",
    "        1\\\\\n",
    "        1\n",
    "    \\end{bmatrix}.\n",
    "\\end{align*}\n",
    "$$\n",
    "\n",
    "1. Construya el sub-espacio de Krylov *no-ortonormalizado* asociado.\n",
    "2. Construya el sub-espacio de Krylov *ortonormalizado* asociado.\n",
    "3. Construya la descomposici√≥n de Hessemberg asociada.\n",
    "4. Determine el sistema de ecuaciones *equivalente* a resolver con GMRes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6deb4170-a792-4a38-b604-1b4558454c60",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6dd4a388-0800-4a57-9948-164c15d4be66",
   "metadata": {},
   "outputs": [],
   "source": [
    "A = np.array([[1.,2.,3.],[3.,2.,1.],[1.,1.,-1.]])\n",
    "b = np.array([1.,1.,1.])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a8821ae-b3d8-4768-a5fc-7dcc158b5f3d",
   "metadata": {},
   "source": [
    "$b_1 = b$, $b_2 = A\\,b$, $b_3 = A^2\\,b = A\\,(A\\,b) = A\\,b_2$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "208e0e69-ab77-45ef-8cec-e9ad5babd291",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1. 1. 1.] [6. 6. 1.] [21. 31. 11.]\n"
     ]
    }
   ],
   "source": [
    "b1 = b\n",
    "b2 = np.dot(A,b1)\n",
    "b3 = np.dot(A,b2)\n",
    "print(b1,b2,b3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f28b22de-e6c5-41d2-abeb-564bcdcb391b",
   "metadata": {},
   "source": [
    "$q_1 = b/\\lVert b \\rVert$\n",
    "\n",
    "Procedimiento para $q_2$\n",
    "\n",
    "$A\\,q_1 = h_{11}\\,q_1 + h_{21}\\,q_2$ (multiplicar por la izquierda $q_1^*$)\n",
    "\n",
    "$q_1^*(A\\,q_1) = h_{11}$\n",
    "\n",
    "$y_2 = A\\,q_1 - h_{11}\\,q_1 = h_{21}\\,q_2$\n",
    "\n",
    "$h_{21} = \\lVert y_2 \\rVert$, $q_2 = y_2 / h_{21}$\n",
    "\n",
    "Procedimiento para $q_3$\n",
    "\n",
    "$A\\,q_2 = h_{12}\\,q_1 + h_{22}\\,q_2 + h_{32}\\,q_3$ (multiplicar por la izquierda $q_1^*$)\n",
    "\n",
    "$q_1^*(A\\,q_2) = h_{12}$\n",
    "\n",
    "$A\\,q_2 = h_{12}\\,q_1 + h_{22}\\,q_2 + h_{32}\\,q_3$ (multiplicar por la izquierda $q_2*$)\n",
    "\n",
    "$q_2^*(A\\,q_2) = h_{22}$\n",
    "\n",
    "$y_3 = A\\,q_2 - h_{12}\\,q_1 - h_{22}\\,q_2 = h_{32}\\,q_3$\n",
    "\n",
    "$h_{32} = \\lVert y_3 \\rVert$, $q_3 = y_3 / h_{32}$\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b8fd9da2-291e-49e3-8c82-77169b655f56",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "q1 = b/np.linalg.norm(b)\n",
    "y1 = np.dot(A,q1)\n",
    "h11 = np.dot(q1,y1)\n",
    "\n",
    "y2 = y1 - h11*q1\n",
    "h21 = np.linalg.norm(y2)\n",
    "q2 = y2 / h21\n",
    "\n",
    "p2 = np.dot(A,q2)\n",
    "h12 = np.dot(q1,p2)\n",
    "h22 = np.dot(q2,p2)\n",
    "y3 = p2 - h12*q1 - h22*q2\n",
    "h32 = np.linalg.norm(y3)\n",
    "q3 = y3 / h32"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "c998e4d4-07c3-4351-af24-bb767c88e0b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q = np.zeros((3,3))\n",
    "Q[:,0] = q1\n",
    "Q[:,1] = q2\n",
    "Q[:,2] = q3\n",
    "\n",
    "H = np.array([[h11,h12],[h21,h22],[0.,h32]])\n",
    "\n",
    "L = A@Q[:,:2]\n",
    "R = Q@H"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23439803-a9b2-4421-839c-b7337a31239b",
   "metadata": {},
   "source": [
    "$H \\, \\begin{bmatrix}c_1 \\\\ c_2\\end{bmatrix} = \\begin{bmatrix}\\lVert b \\rVert \\\\0 \\\\ 0\\end{bmatrix}$\n",
    "\n",
    "$Qh,Rh = QR(H)$\n",
    "\n",
    "$Rh\\,c = Qh^*\\begin{bmatrix}\\lVert b \\rVert \\\\0 \\\\ 0\\end{bmatrix}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "151d67e1-f357-4fce-901f-579a70c26755",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.29921072],\n",
       "       [0.23839316]])"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bh = np.zeros((3,1))\n",
    "bh[0] = np.linalg.norm(b)\n",
    "\n",
    "Qh,Rh = np.linalg.qr(H,mode=\"reduced\")\n",
    "bqr = np.dot(Qh.T,bh)\n",
    "c = np.linalg.solve(Rh,bqr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "e4abacc7-27c9-4c61-8a62-19762edb6568",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.25,  1.  , -0.25])"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = np.linalg.solve(A,b)\n",
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "5e1170fc-6e66-4c08-a8d5-0657c9adba65",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6041220933301769"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xc = c[0]*q1 + c[1]*q2\n",
    "np.linalg.norm(b - np.dot(A,xc))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
